{"filter":false,"title":"answer.blade.php","tooltip":"/resources/views/answer.blade.php","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":68,"column":11},"action":"remove","lines":["@extends('layouts.app')","","@section('content')","    {{--@if (Auth::user()->VIP === '0')--}}","        {{--<div class=\"container\">--}}","            {{--<centering>--}}","                {{--<h1 style=\"color:#38c172\">     </h1>--}}","    {{--</centering>--}}","        {{--</div>--}}","    {{--@else--}}","        {{--<centering>--}}","            {{--<h1 style=\"color:#38c172\">VIP</h1>--}}","        {{--</centering>--}}","    {{--@endif--}}","","    <div class=\"container\">","        <div class=\"row justify-content-center\">","            <div class=\"col-md-12\">","                <div class=\"card\">","                    <div class=\"card-header\">Questions","                        <a class=\"btn btn-primary float-right\" href=\"{{ route('questions.create') }}\">","                            Create a Question","                        </a>","","                        <div class=\"card-body\">","","                            <div class=\"card-deck\">","                                @forelse($questions as $question)","                                    <div class=\"col-sm-4 d-flex align-items-stretch\">","                                        <div class=\"card mb-3 \">","                                            <div class=\"card-header\">","                                                <small class=\"text-muted\">","                                                    Updated: {{ $question->created_at->diffForHumans() }}","                                                    Answers: {{ $question->answers()->count() }}","","                                                </small>","                                            </div>","                                            <div class=\"card-body\">","                                                <p class=\"card-text\">{{$question->body}}</p>","                                            </div>","                                            <div class=\"card-footer\">","                                                <p class=\"card-text\">","","                                                    <a class=\"btn btn-primary float-right\" href=\"{{ route('questions.show', ['id' => $question->id]) }}\">","                                                        View","                                                    </a>","                                                </p>","                                            </div>","                                        </div>","                                    </div>","                                @empty","                                    There are no questions to view, you can  create a question.","                                @endforelse","","","                            </div>","","                        </div>","                        <div class=\"card-footer\">","                            <div class=\"float-right\">","                                {{ $questions->links() }}","                            </div>","                        </div>","","                    </div>","                </div>","            </div>","        </div>","@endsection"],"id":2},{"start":{"row":0,"column":0},"end":{"row":105,"column":1},"action":"insert","lines":["<?php","namespace App\\Http\\Controllers;","use App\\Answer;","use App\\Question;","use Illuminate\\Support\\Facades\\Auth;","use Illuminate\\Http\\Request;","class AnswerController extends Controller","{","    public function __construct()","    {","        $this->middleware('auth');","    }","    /**","     * Display a listing of the resource.","     *","     * @return \\Illuminate\\Http\\Response","     */","    /**","     * Show the form for creating a new resource.","     *","     * @return \\Illuminate\\Http\\Response","     */","    public function create($question)","    {","        $answer = new Answer;","        $edit = FALSE;","        return view('answerForm', ['answer' => $answer,'edit' => $edit, 'question' =>$question  ]);","    }","    /**","     * Store a newly created resource in storage.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Illuminate\\Http\\Response","     */","    public function store(Request $request, $question)","    {","        $input = $request->validate([","            'body' => 'required|min:5',","        ], [","            'body.required' => 'Body is required',","            'body.min' => 'Body must be at least 5 characters',","        ]);","        $input = request()->all();","        $question = Question::find($question);","        $Answer = new Answer($input);","        $Answer->user()->associate(Auth::user());","        $Answer->question()->associate($question);","        $Answer->save();","        return redirect()->route('questions.show',['question_id' => $question->id])->with('message', 'Saved');","    }","    /**","     * Display the specified resource.","     *","     * @param  int  $id","     * @return \\Illuminate\\Http\\Response","     */","    public function show($question,  $answer)","    {","        $answer = Answer::find($answer);","        return view('answer')->with(['answer' => $answer, 'question' => $question]);","    }","    /**","     * Show the form for editing the specified resource.","     *","     * @param  int  $id","     * @return \\Illuminate\\Http\\Response","     */","    public function edit($question,  $answer)","    {","        $answer = Answer::find($answer);","        $edit = TRUE;","        return view('answerForm', ['answer' => $answer, 'edit' => $edit, 'question'=>$question ]);","    }","    /**","     * Update the specified resource in storage.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @param  int  $id","     * @return \\Illuminate\\Http\\Response","     */","    public function update(Request $request, $question, $answer)","    {","        $input = $request->validate([","            'body' => 'required|min:5',","        ], [","            'body.required' => 'Body is required',","            'body.min' => 'Body must be at least 5 characters',","        ]);","        $answer = Answer::find($answer);","        $answer->body = $request->body;","        $answer->save();","        return redirect()->route('answers.show',['question_id' => $question, 'answer_id' => $answer])->with('message', 'Updated');","    }","    /**","     * Remove the specified resource from storage.","     *","     * @param  int  $id","     * @return \\Illuminate\\Http\\Response","     */","    public function destroy($question, $answer)","    {","        $answer = Answer::find($answer);","        $answer->delete();","        return redirect()->route('questions.show',['question_id' => $question])->with('message', 'Deleted');","    }","}"]}]]},"ace":{"folds":[],"scrolltop":1258.25,"scrollleft":0,"selection":{"start":{"row":105,"column":1},"end":{"row":105,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":91,"state":"php-start","mode":"ace/mode/php"}},"timestamp":1557105460733,"hash":"1b79325da2120c1a063a0b57839dcd64f4d0d9e2"}